{"uid":"bdcf4b3d50d9f4e4","name":"Verify power-cap for a single node","fullName":"api.3-build-pipeline-only.test_power-cap.tavern#Verify power-cap for a single node","historyId":"e2ae67539213be5181105043ad513bb3","time":{"start":1711355758894,"stop":1711355768292,"duration":9398},"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7fc0f78f1e50>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError","statusTrace":"Format variables:\n  pcs_base_url = 'http://cray-power-control:28007'\n  patch_task_id_1 = '71574c6e-cee7-4b70-ba28-238d7a72985b'\n  verify = 'False'\n  patch_task_id_1 = '71574c6e-cee7-4b70-ba28-238d7a72985b'\n  node_xname = 'x3000c0s6b0n0'\n  node_power_cap_name = 'Node Power Limit'\n  node_power_cap_min = '5036'\n  node_power_cap_max = '11221'\n  node_power_cap_min = '5036'\n\nSource test stage (line 326):\n  - name: Retrieve the completed power-cap patch for the target node and minimum power cap value\n    request:\n      url: \"{pcs_base_url}/power-cap/{patch_task_id_1}\"\n      method: GET\n      verify: !bool \"{verify}\"\n    response:\n      status_code: 200\n      verify_response_with:\n        function: tavern.testutils.helpers:validate_pykwalify\n        extra_kwargs:\n          schema:\n            type: map\n            required: True\n            mapping:\n              taskID:\n                type: str\n                required: True\n                enum:\n                  - \"{patch_task_id_1}\"\n              type:\n                type: str\n                required: True\n                enum:\n                  - \"patch\"\n              taskCreateTime:\n                type: timestamp\n                required: True\n              automaticExpirationTime:\n                type: timestamp\n                required: True\n              taskStatus:\n                type: str\n                required: True\n                enum:\n                  - \"completed\"\n              taskCounts:\n                type: map\n                required: True\n                mapping:\n                  total:\n                    type: int\n                    required: True\n                  new:\n                    type: int\n                    required: True\n                  in-progress:\n                    type: int\n                    required: True\n                  failed:\n                    type: int\n                    required: True\n                  succeeded:\n                    type: int\n                    required: True\n                  un-supported:\n                    type: int\n                    required: True\n              components:\n                type: seq\n                matching: all\n                required: True\n                sequence:\n                  - type: map\n                    required: True\n                    mapping:\n                      xname:\n                        type: str\n                        required: True\n                        enum:\n                          - \"{node_xname}\"\n                      powerCapLimits:\n                        type: seq\n                        matching: all\n                        required: True\n                        sequence:\n                          - type: map\n                            required: True\n                            mapping:\n                              name:\n                                type: str\n                                required: True\n                                enum:\n                                  - \"{node_power_cap_name}\"\n                              currentValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n                              maximumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_max}\"\n                              minimumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n\n\nFormatted stage:\n  name: Retrieve the completed power-cap patch for the target node and minimum power\n    cap value\n  request:\n    method: GET\n    url: 'http://cray-power-control:28007/power-cap/71574c6e-cee7-4b70-ba28-238d7a72985b'\n    verify: !bool 'False'\n  response:\n    status_code: 200\n    verify_response_with:\n      extra_kwargs:\n        schema:\n          mapping:\n            automaticExpirationTime:\n              required: true\n              type: timestamp\n            components:\n              matching: all\n              required: true\n              sequence:\n              - mapping:\n                  powerCapLimits:\n                    matching: all\n                    required: true\n                    sequence:\n                    - mapping:\n                        currentValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        maximumValue:\n                          enum:\n                          - !int '11221'\n                          required: true\n                          type: int\n                        minimumValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        name:\n                          enum:\n                          - 'Node Power Limit'\n                          required: true\n                          type: str\n                      required: true\n                      type: map\n                    type: seq\n                  xname:\n                    enum:\n                    - 'x3000c0s6b0n0'\n                    required: true\n                    type: str\n                required: true\n                type: map\n              type: seq\n            taskCounts:\n              mapping:\n                failed:\n                  required: true\n                  type: int\n                in-progress:\n                  required: true\n                  type: int\n                new:\n                  required: true\n                  type: int\n                succeeded:\n                  required: true\n                  type: int\n                total:\n                  required: true\n                  type: int\n                un-supported:\n                  required: true\n                  type: int\n              required: true\n              type: map\n            taskCreateTime:\n              required: true\n              type: timestamp\n            taskID:\n              enum:\n              - '71574c6e-cee7-4b70-ba28-238d7a72985b'\n              required: true\n              type: str\n            taskStatus:\n              enum:\n              - completed\n              required: true\n              type: str\n            type:\n              enum:\n              - patch\n              required: true\n              type: str\n          required: true\n          type: map\n      function: tavern.testutils.helpers:validate_pykwalify\n\nErrors:\nE   tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n    - Error calling validate function '<function validate_pykwalify at 0x7fc0f78f1e50>':\n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n            verifier.validate()\n          File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n            raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n        pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n         - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n    \n        The above exception was the direct cause of the following exception:\n    \n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n            vf(response)\n          File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n            result = func(response, *args, **kwargs)\n          File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n            verify_generic(to_verify, schema)\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n            raise BadSchemaError() from e\n        tavern.util.exceptions.BadSchemaError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7fc0f78f1e50>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError","statusTrace":"Format variables:\n  pcs_base_url = 'http://cray-power-control:28007'\n  patch_task_id_1 = '71574c6e-cee7-4b70-ba28-238d7a72985b'\n  verify = 'False'\n  patch_task_id_1 = '71574c6e-cee7-4b70-ba28-238d7a72985b'\n  node_xname = 'x3000c0s6b0n0'\n  node_power_cap_name = 'Node Power Limit'\n  node_power_cap_min = '5036'\n  node_power_cap_max = '11221'\n  node_power_cap_min = '5036'\n\nSource test stage (line 326):\n  - name: Retrieve the completed power-cap patch for the target node and minimum power cap value\n    request:\n      url: \"{pcs_base_url}/power-cap/{patch_task_id_1}\"\n      method: GET\n      verify: !bool \"{verify}\"\n    response:\n      status_code: 200\n      verify_response_with:\n        function: tavern.testutils.helpers:validate_pykwalify\n        extra_kwargs:\n          schema:\n            type: map\n            required: True\n            mapping:\n              taskID:\n                type: str\n                required: True\n                enum:\n                  - \"{patch_task_id_1}\"\n              type:\n                type: str\n                required: True\n                enum:\n                  - \"patch\"\n              taskCreateTime:\n                type: timestamp\n                required: True\n              automaticExpirationTime:\n                type: timestamp\n                required: True\n              taskStatus:\n                type: str\n                required: True\n                enum:\n                  - \"completed\"\n              taskCounts:\n                type: map\n                required: True\n                mapping:\n                  total:\n                    type: int\n                    required: True\n                  new:\n                    type: int\n                    required: True\n                  in-progress:\n                    type: int\n                    required: True\n                  failed:\n                    type: int\n                    required: True\n                  succeeded:\n                    type: int\n                    required: True\n                  un-supported:\n                    type: int\n                    required: True\n              components:\n                type: seq\n                matching: all\n                required: True\n                sequence:\n                  - type: map\n                    required: True\n                    mapping:\n                      xname:\n                        type: str\n                        required: True\n                        enum:\n                          - \"{node_xname}\"\n                      powerCapLimits:\n                        type: seq\n                        matching: all\n                        required: True\n                        sequence:\n                          - type: map\n                            required: True\n                            mapping:\n                              name:\n                                type: str\n                                required: True\n                                enum:\n                                  - \"{node_power_cap_name}\"\n                              currentValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n                              maximumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_max}\"\n                              minimumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n\n\nFormatted stage:\n  name: Retrieve the completed power-cap patch for the target node and minimum power\n    cap value\n  request:\n    method: GET\n    url: 'http://cray-power-control:28007/power-cap/71574c6e-cee7-4b70-ba28-238d7a72985b'\n    verify: !bool 'False'\n  response:\n    status_code: 200\n    verify_response_with:\n      extra_kwargs:\n        schema:\n          mapping:\n            automaticExpirationTime:\n              required: true\n              type: timestamp\n            components:\n              matching: all\n              required: true\n              sequence:\n              - mapping:\n                  powerCapLimits:\n                    matching: all\n                    required: true\n                    sequence:\n                    - mapping:\n                        currentValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        maximumValue:\n                          enum:\n                          - !int '11221'\n                          required: true\n                          type: int\n                        minimumValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        name:\n                          enum:\n                          - 'Node Power Limit'\n                          required: true\n                          type: str\n                      required: true\n                      type: map\n                    type: seq\n                  xname:\n                    enum:\n                    - 'x3000c0s6b0n0'\n                    required: true\n                    type: str\n                required: true\n                type: map\n              type: seq\n            taskCounts:\n              mapping:\n                failed:\n                  required: true\n                  type: int\n                in-progress:\n                  required: true\n                  type: int\n                new:\n                  required: true\n                  type: int\n                succeeded:\n                  required: true\n                  type: int\n                total:\n                  required: true\n                  type: int\n                un-supported:\n                  required: true\n                  type: int\n              required: true\n              type: map\n            taskCreateTime:\n              required: true\n              type: timestamp\n            taskID:\n              enum:\n              - '71574c6e-cee7-4b70-ba28-238d7a72985b'\n              required: true\n              type: str\n            taskStatus:\n              enum:\n              - completed\n              required: true\n              type: str\n            type:\n              enum:\n              - patch\n              required: true\n              type: str\n          required: true\n          type: map\n      function: tavern.testutils.helpers:validate_pykwalify\n\nErrors:\nE   tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n    - Error calling validate function '<function validate_pykwalify at 0x7fc0f78f1e50>':\n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n            verifier.validate()\n          File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n            raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n        pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n         - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n    \n        The above exception was the direct cause of the following exception:\n    \n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n            vf(response)\n          File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n            result = func(response, *args, **kwargs)\n          File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n            verify_generic(to_verify, schema)\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n            raise BadSchemaError() from e\n        tavern.util.exceptions.BadSchemaError","steps":[{"name":"Stage 0: Retrieve a compute node from HSM to be used in later stages","time":{"start":1711355759065,"stop":1711355759097,"duration":32},"status":"passed","steps":[],"attachments":[{"uid":"4856bbc2f6cc7f4e","name":"stage_yaml","source":"4856bbc2f6cc7f4e.yaml","type":"application/yaml","size":333},{"uid":"4958266511e1bb3c","name":"rest_request","source":"4958266511e1bb3c.yaml","type":"application/yaml","size":149},{"uid":"fed95ff30aaacd9b","name":"rest_response","source":"fed95ff30aaacd9b.yaml","type":"application/yaml","size":5776}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 1: Set target node state to Off","time":{"start":1711355759098,"stop":1711355759106,"duration":8},"status":"passed","steps":[],"attachments":[{"uid":"bd9d2e8513b8a452","name":"stage_yaml","source":"bd9d2e8513b8a452.yaml","type":"application/yaml","size":228},{"uid":"e692904bf275495c","name":"rest_request","source":"e692904bf275495c.yaml","type":"application/yaml","size":173},{"uid":"33b0da002391a562","name":"rest_response","source":"33b0da002391a562.yaml","type":"application/yaml","size":134}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 2: Set target node state to Ready","time":{"start":1711355759106,"stop":1711355759114,"duration":8},"status":"passed","steps":[],"attachments":[{"uid":"bf2808bffeb2ec0a","name":"stage_yaml","source":"bf2808bffeb2ec0a.yaml","type":"application/yaml","size":231},{"uid":"902ea52f028edf9c","name":"rest_request","source":"902ea52f028edf9c.yaml","type":"application/yaml","size":173},{"uid":"c92547da60231ccb","name":"rest_response","source":"c92547da60231ccb.yaml","type":"application/yaml","size":134}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 3: Create a power-cap snapshot for the target node","time":{"start":1711355759115,"stop":1711355759125,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"5546f93f8284719b","name":"stage_yaml","source":"5546f93f8284719b.yaml","type":"application/yaml","size":543},{"uid":"c85e5a3221d4b431","name":"rest_request","source":"c85e5a3221d4b431.yaml","type":"application/yaml","size":166},{"uid":"ea7869d8d33f35e2","name":"rest_response","source":"ea7869d8d33f35e2.yaml","type":"application/yaml","size":261}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 4: Retrieve the power-cap snapshot for the target node","time":{"start":1711355759127,"stop":1711355760140,"duration":1013},"status":"passed","steps":[],"attachments":[{"uid":"e4bb25781cc7941","name":"stage_yaml","source":"e4bb25781cc7941.yaml","type":"application/yaml","size":661},{"uid":"af1c067028785294","name":"rest_request","source":"af1c067028785294.yaml","type":"application/yaml","size":159},{"uid":"6154bd229d312b33","name":"rest_response","source":"6154bd229d312b33.yaml","type":"application/yaml","size":688}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 5: Retrieve the completed power-cap snapshot for the target node","time":{"start":1711355760141,"stop":1711355760155,"duration":14},"status":"passed","steps":[],"attachments":[{"uid":"c7ee3d2728dcf523","name":"stage_yaml","source":"c7ee3d2728dcf523.yaml","type":"application/yaml","size":3543},{"uid":"54590ab2934ffad6","name":"rest_request","source":"54590ab2934ffad6.yaml","type":"application/yaml","size":159},{"uid":"25375330a1b3440e","name":"rest_response","source":"25375330a1b3440e.yaml","type":"application/yaml","size":688}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 6: Set a power-cap of the minimum value on the target node","time":{"start":1711355760156,"stop":1711355760166,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"692fcc119523a95a","name":"stage_yaml","source":"692fcc119523a95a.yaml","type":"application/yaml","size":639},{"uid":"3c06cf5363cba937","name":"rest_request","source":"3c06cf5363cba937.yaml","type":"application/yaml","size":230},{"uid":"5dda852716c8cff3","name":"rest_response","source":"5dda852716c8cff3.yaml","type":"application/yaml","size":261}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 7: Retrieve the power-cap patch for the target node and minimum power cap value","time":{"start":1711355760169,"stop":1711355768276,"duration":8107},"status":"passed","steps":[],"attachments":[{"uid":"378988dfe721cdca","name":"stage_yaml","source":"378988dfe721cdca.yaml","type":"application/yaml","size":679},{"uid":"26d7871b164a6ab9","name":"rest_request","source":"26d7871b164a6ab9.yaml","type":"application/yaml","size":159},{"uid":"b1aca561822647f5","name":"rest_response","source":"b1aca561822647f5.yaml","type":"application/yaml","size":623},{"uid":"f88f947496228308","name":"stage_yaml","source":"f88f947496228308.yaml","type":"application/yaml","size":679},{"uid":"c18c754a5ae5c976","name":"rest_request","source":"c18c754a5ae5c976.yaml","type":"application/yaml","size":159},{"uid":"3c18b4a38e4095d7","name":"rest_response","source":"3c18b4a38e4095d7.yaml","type":"application/yaml","size":623},{"uid":"371f1e35d71c2b9","name":"stage_yaml","source":"371f1e35d71c2b9.yaml","type":"application/yaml","size":679},{"uid":"a1bcc5f1a732c801","name":"rest_request","source":"a1bcc5f1a732c801.yaml","type":"application/yaml","size":159},{"uid":"a0e1d27fe9d8d39","name":"rest_response","source":"a0e1d27fe9d8d39.yaml","type":"application/yaml","size":623},{"uid":"f8148ec8663e55cd","name":"stage_yaml","source":"f8148ec8663e55cd.yaml","type":"application/yaml","size":679},{"uid":"fd5adb3fcf57f631","name":"rest_request","source":"fd5adb3fcf57f631.yaml","type":"application/yaml","size":159},{"uid":"eb54b1f7c19bee4d","name":"rest_response","source":"eb54b1f7c19bee4d.yaml","type":"application/yaml","size":623},{"uid":"bd0a60e8381cfeaa","name":"stage_yaml","source":"bd0a60e8381cfeaa.yaml","type":"application/yaml","size":679},{"uid":"b1c1445e66633fa4","name":"rest_request","source":"b1c1445e66633fa4.yaml","type":"application/yaml","size":159},{"uid":"504668259df7607","name":"rest_response","source":"504668259df7607.yaml","type":"application/yaml","size":623},{"uid":"a704e7f225599f90","name":"stage_yaml","source":"a704e7f225599f90.yaml","type":"application/yaml","size":679},{"uid":"d31a4fd1e0a95043","name":"rest_request","source":"d31a4fd1e0a95043.yaml","type":"application/yaml","size":159},{"uid":"325cc0cfe80f4dbf","name":"rest_response","source":"325cc0cfe80f4dbf.yaml","type":"application/yaml","size":623},{"uid":"887f267dc861bb78","name":"stage_yaml","source":"887f267dc861bb78.yaml","type":"application/yaml","size":679},{"uid":"f7bbd80e85d0fe02","name":"rest_request","source":"f7bbd80e85d0fe02.yaml","type":"application/yaml","size":159},{"uid":"ae83c0a97f3514af","name":"rest_response","source":"ae83c0a97f3514af.yaml","type":"application/yaml","size":623},{"uid":"daf4bce9543f428f","name":"stage_yaml","source":"daf4bce9543f428f.yaml","type":"application/yaml","size":679},{"uid":"890d8f3d43cd88d5","name":"rest_request","source":"890d8f3d43cd88d5.yaml","type":"application/yaml","size":159},{"uid":"82504f086d4c0618","name":"rest_response","source":"82504f086d4c0618.yaml","type":"application/yaml","size":797}],"parameters":[],"stepsCount":0,"attachmentsCount":24,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 8: Retrieve the completed power-cap patch for the target node and minimum power cap value","time":{"start":1711355768277,"stop":1711355768291,"duration":14},"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7fc0f78f1e50>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError\n\n","statusTrace":"  File \"/usr/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/lib/python3.9/site-packages/tavern/util/retry.py\", line 31, in wrapped\n    res = fn(*args, **kwargs)\n  File \"/usr/lib/python3.9/site-packages/tavern/core.py\", line 270, in run_stage\n    saved = v.verify(response)\n  File \"/usr/lib/python3.9/site-packages/tavern/_plugins/rest/response.py\", line 201, in verify\n    raise exceptions.TestFailError(\n","steps":[],"attachments":[{"uid":"93e1ef1d793f0c1","name":"stage_yaml","source":"93e1ef1d793f0c1.yaml","type":"application/yaml","size":3157},{"uid":"160abd681a8c7749","name":"rest_request","source":"160abd681a8c7749.yaml","type":"application/yaml","size":159},{"uid":"288acff06245cfc4","name":"rest_response","source":"288acff06245cfc4.yaml","type":"application/yaml","size":797}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"f9d7f976621d7963","name":"error_output","source":"f9d7f976621d7963.attach","type":"text/plain","size":8330},{"uid":"9009fbbdd394fb3","name":"log","source":"9009fbbdd394fb3.txt","type":"text/plain","size":30808}],"parameters":[],"stepsCount":9,"attachmentsCount":50,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"cray-power-control-hmth-test"},{"name":"suite","value":"build-pipeline-only"},{"name":"host","value":"3baacbaabe76"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"api.3-build-pipeline-only.test_power-cap.tavern"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":24,"broken":0,"skipped":0,"passed":289,"unknown":0,"total":313},"items":[{"uid":"e8b1a165ced852c2","status":"passed","time":{"start":1711269366481,"stop":1711269374004,"duration":7523}},{"uid":"5eedcd182ab1d026","status":"passed","time":{"start":1711182820301,"stop":1711182827822,"duration":7521}},{"uid":"1e300ccf73710132","status":"passed","time":{"start":1711096713221,"stop":1711096720708,"duration":7487}},{"uid":"73ca9cdf0d7f6ff6","status":"passed","time":{"start":1711010099288,"stop":1711010106813,"duration":7525}},{"uid":"7da7b705a442206b","status":"passed","time":{"start":1710923741174,"stop":1710923748706,"duration":7532}},{"uid":"daa16175fa1c64a3","status":"passed","time":{"start":1710837342858,"stop":1710837350385,"duration":7527}},{"uid":"ab24d59b82423592","status":"passed","time":{"start":1710751007797,"stop":1710751015324,"duration":7527}},{"uid":"999f0712eb510528","status":"passed","time":{"start":1710664514035,"stop":1710664521549,"duration":7514}},{"uid":"2eec06889f4cecb1","status":"passed","time":{"start":1710578140047,"stop":1710578147577,"duration":7530}},{"uid":"938ae40e48e600a3","status":"passed","time":{"start":1710491645193,"stop":1710491652710,"duration":7517}},{"uid":"47eaa7f4f1f8d19c","status":"passed","time":{"start":1710405345297,"stop":1710405353836,"duration":8539}},{"uid":"8e76cd9a2f55a9e9","status":"passed","time":{"start":1710318925029,"stop":1710318932554,"duration":7525}},{"uid":"463f6b5f370cca84","status":"passed","time":{"start":1710232500226,"stop":1710232507751,"duration":7525}},{"uid":"aa563a08b41c0a7d","status":"passed","time":{"start":1710146060368,"stop":1710146067897,"duration":7529}},{"uid":"459f49593df9eddc","status":"passed","time":{"start":1710059697527,"stop":1710059705053,"duration":7526}},{"uid":"3064108c3971fb8a","status":"passed","time":{"start":1709973332893,"stop":1709973340404,"duration":7511}},{"uid":"6bb1710d9832ab1a","status":"passed","time":{"start":1709886954729,"stop":1709886962247,"duration":7518}},{"uid":"a0d52d3dd43d60d3","status":"passed","time":{"start":1709800490226,"stop":1709800497751,"duration":7525}},{"uid":"b0ce999d6b596e4f","status":"passed","time":{"start":1709714182036,"stop":1709714189554,"duration":7518}},{"uid":"a931dc6c7f6485ec","status":"passed","time":{"start":1709627748921,"stop":1709627756438,"duration":7517}}]},"tags":[]},"source":"bdcf4b3d50d9f4e4.json","parameterValues":[]}