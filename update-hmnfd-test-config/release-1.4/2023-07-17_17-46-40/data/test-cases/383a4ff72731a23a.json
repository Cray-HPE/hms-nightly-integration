{"uid":"383a4ff72731a23a","name":"Verify power-cap for a single node","fullName":"api.4-build-pipeline-only.test_power-cap.tavern#Verify power-cap for a single node","historyId":"c6d875da97f650251a49a7570403f1b8","time":{"start":1689615593864,"stop":1689615597278,"duration":3414},"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7f1345f2c430>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Cannot find required key 'powerCapLimits'. Path: '/components/0'.\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError","statusTrace":"Format variables:\n  pcs_base_url = 'http://cray-power-control:28007'\n  patch_task_id_1 = 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n  verify = 'False'\n  patch_task_id_1 = 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n  node_xname = 'x3000c0s6b0n0'\n  node_power_cap_name = 'Node Power Limit'\n  node_power_cap_min = '5036'\n  node_power_cap_max = '11221'\n  node_power_cap_min = '5036'\n\nSource test stage (line 326):\n  - name: Retrieve the completed power-cap patch for the target node and minimum power cap value\n    request:\n      url: \"{pcs_base_url}/power-cap/{patch_task_id_1}\"\n      method: GET\n      verify: !bool \"{verify}\"\n    response:\n      status_code: 200\n      verify_response_with:\n        function: tavern.testutils.helpers:validate_pykwalify\n        extra_kwargs:\n          schema:\n            type: map\n            required: True\n            mapping:\n              taskID:\n                type: str\n                required: True\n                enum:\n                  - \"{patch_task_id_1}\"\n              type:\n                type: str\n                required: True\n                enum:\n                  - \"patch\"\n              taskCreateTime:\n                type: timestamp\n                required: True\n              automaticExpirationTime:\n                type: timestamp\n                required: True\n              taskStatus:\n                type: str\n                required: True\n                enum:\n                  - \"completed\"\n              taskCounts:\n                type: map\n                required: True\n                mapping:\n                  total:\n                    type: int\n                    required: True\n                  new:\n                    type: int\n                    required: True\n                  in-progress:\n                    type: int\n                    required: True\n                  failed:\n                    type: int\n                    required: True\n                  succeeded:\n                    type: int\n                    required: True\n                  un-supported:\n                    type: int\n                    required: True\n              components:\n                type: seq\n                matching: all\n                required: True\n                sequence:\n                  - type: map\n                    required: True\n                    mapping:\n                      xname:\n                        type: str\n                        required: True\n                        enum:\n                          - \"{node_xname}\"\n                      powerCapLimits:\n                        type: seq\n                        matching: all\n                        required: True\n                        sequence:\n                          - type: map\n                            required: True\n                            mapping:\n                              name:\n                                type: str\n                                required: True\n                                enum:\n                                  - \"{node_power_cap_name}\"\n                              currentValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n                              maximumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_max}\"\n                              minimumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n\n\nFormatted stage:\n  name: Retrieve the completed power-cap patch for the target node and minimum power\n    cap value\n  request:\n    method: GET\n    url: 'http://cray-power-control:28007/power-cap/e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n    verify: !bool 'False'\n  response:\n    status_code: 200\n    verify_response_with:\n      extra_kwargs:\n        schema:\n          mapping:\n            automaticExpirationTime:\n              required: true\n              type: timestamp\n            components:\n              matching: all\n              required: true\n              sequence:\n              - mapping:\n                  powerCapLimits:\n                    matching: all\n                    required: true\n                    sequence:\n                    - mapping:\n                        currentValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        maximumValue:\n                          enum:\n                          - !int '11221'\n                          required: true\n                          type: int\n                        minimumValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        name:\n                          enum:\n                          - 'Node Power Limit'\n                          required: true\n                          type: str\n                      required: true\n                      type: map\n                    type: seq\n                  xname:\n                    enum:\n                    - 'x3000c0s6b0n0'\n                    required: true\n                    type: str\n                required: true\n                type: map\n              type: seq\n            taskCounts:\n              mapping:\n                failed:\n                  required: true\n                  type: int\n                in-progress:\n                  required: true\n                  type: int\n                new:\n                  required: true\n                  type: int\n                succeeded:\n                  required: true\n                  type: int\n                total:\n                  required: true\n                  type: int\n                un-supported:\n                  required: true\n                  type: int\n              required: true\n              type: map\n            taskCreateTime:\n              required: true\n              type: timestamp\n            taskID:\n              enum:\n              - 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n              required: true\n              type: str\n            taskStatus:\n              enum:\n              - completed\n              required: true\n              type: str\n            type:\n              enum:\n              - patch\n              required: true\n              type: str\n          required: true\n          type: map\n      function: tavern.testutils.helpers:validate_pykwalify\n\nErrors:\nE   tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n    - Error calling validate function '<function validate_pykwalify at 0x7f1345f2c430>':\n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n            verifier.validate()\n          File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n            raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n        pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n         - Cannot find required key 'powerCapLimits'. Path: '/components/0'.\n         - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n    \n        The above exception was the direct cause of the following exception:\n    \n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n            vf(response)\n          File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n            result = func(response, *args, **kwargs)\n          File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n            verify_generic(to_verify, schema)\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n            raise BadSchemaError() from e\n        tavern.util.exceptions.BadSchemaError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7f1345f2c430>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Cannot find required key 'powerCapLimits'. Path: '/components/0'.\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError","statusTrace":"Format variables:\n  pcs_base_url = 'http://cray-power-control:28007'\n  patch_task_id_1 = 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n  verify = 'False'\n  patch_task_id_1 = 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n  node_xname = 'x3000c0s6b0n0'\n  node_power_cap_name = 'Node Power Limit'\n  node_power_cap_min = '5036'\n  node_power_cap_max = '11221'\n  node_power_cap_min = '5036'\n\nSource test stage (line 326):\n  - name: Retrieve the completed power-cap patch for the target node and minimum power cap value\n    request:\n      url: \"{pcs_base_url}/power-cap/{patch_task_id_1}\"\n      method: GET\n      verify: !bool \"{verify}\"\n    response:\n      status_code: 200\n      verify_response_with:\n        function: tavern.testutils.helpers:validate_pykwalify\n        extra_kwargs:\n          schema:\n            type: map\n            required: True\n            mapping:\n              taskID:\n                type: str\n                required: True\n                enum:\n                  - \"{patch_task_id_1}\"\n              type:\n                type: str\n                required: True\n                enum:\n                  - \"patch\"\n              taskCreateTime:\n                type: timestamp\n                required: True\n              automaticExpirationTime:\n                type: timestamp\n                required: True\n              taskStatus:\n                type: str\n                required: True\n                enum:\n                  - \"completed\"\n              taskCounts:\n                type: map\n                required: True\n                mapping:\n                  total:\n                    type: int\n                    required: True\n                  new:\n                    type: int\n                    required: True\n                  in-progress:\n                    type: int\n                    required: True\n                  failed:\n                    type: int\n                    required: True\n                  succeeded:\n                    type: int\n                    required: True\n                  un-supported:\n                    type: int\n                    required: True\n              components:\n                type: seq\n                matching: all\n                required: True\n                sequence:\n                  - type: map\n                    required: True\n                    mapping:\n                      xname:\n                        type: str\n                        required: True\n                        enum:\n                          - \"{node_xname}\"\n                      powerCapLimits:\n                        type: seq\n                        matching: all\n                        required: True\n                        sequence:\n                          - type: map\n                            required: True\n                            mapping:\n                              name:\n                                type: str\n                                required: True\n                                enum:\n                                  - \"{node_power_cap_name}\"\n                              currentValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n                              maximumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_max}\"\n                              minimumValue:\n                                type: int\n                                required: True\n                                enum:\n                                  - !int \"{node_power_cap_min}\"\n\n\nFormatted stage:\n  name: Retrieve the completed power-cap patch for the target node and minimum power\n    cap value\n  request:\n    method: GET\n    url: 'http://cray-power-control:28007/power-cap/e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n    verify: !bool 'False'\n  response:\n    status_code: 200\n    verify_response_with:\n      extra_kwargs:\n        schema:\n          mapping:\n            automaticExpirationTime:\n              required: true\n              type: timestamp\n            components:\n              matching: all\n              required: true\n              sequence:\n              - mapping:\n                  powerCapLimits:\n                    matching: all\n                    required: true\n                    sequence:\n                    - mapping:\n                        currentValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        maximumValue:\n                          enum:\n                          - !int '11221'\n                          required: true\n                          type: int\n                        minimumValue:\n                          enum:\n                          - !int '5036'\n                          required: true\n                          type: int\n                        name:\n                          enum:\n                          - 'Node Power Limit'\n                          required: true\n                          type: str\n                      required: true\n                      type: map\n                    type: seq\n                  xname:\n                    enum:\n                    - 'x3000c0s6b0n0'\n                    required: true\n                    type: str\n                required: true\n                type: map\n              type: seq\n            taskCounts:\n              mapping:\n                failed:\n                  required: true\n                  type: int\n                in-progress:\n                  required: true\n                  type: int\n                new:\n                  required: true\n                  type: int\n                succeeded:\n                  required: true\n                  type: int\n                total:\n                  required: true\n                  type: int\n                un-supported:\n                  required: true\n                  type: int\n              required: true\n              type: map\n            taskCreateTime:\n              required: true\n              type: timestamp\n            taskID:\n              enum:\n              - 'e2ae8a38-e86c-4fcf-a7f6-ef6065d8437b'\n              required: true\n              type: str\n            taskStatus:\n              enum:\n              - completed\n              required: true\n              type: str\n            type:\n              enum:\n              - patch\n              required: true\n              type: str\n          required: true\n          type: map\n      function: tavern.testutils.helpers:validate_pykwalify\n\nErrors:\nE   tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n    - Error calling validate function '<function validate_pykwalify at 0x7f1345f2c430>':\n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n            verifier.validate()\n          File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n            raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n        pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n         - Cannot find required key 'powerCapLimits'. Path: '/components/0'.\n         - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n    \n        The above exception was the direct cause of the following exception:\n    \n        Traceback (most recent call last):\n          File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n            vf(response)\n          File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n            result = func(response, *args, **kwargs)\n          File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n            verify_generic(to_verify, schema)\n          File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n            raise BadSchemaError() from e\n        tavern.util.exceptions.BadSchemaError","steps":[{"name":"Stage 0: Retrieve a compute node from HSM to be used in later stages","time":{"start":1689615594070,"stop":1689615594111,"duration":41},"status":"passed","steps":[],"attachments":[{"uid":"fc0db25c362dc050","name":"stage_yaml","source":"fc0db25c362dc050.yaml","type":"application/yaml","size":333},{"uid":"4bc786b0bda11526","name":"rest_request","source":"4bc786b0bda11526.yaml","type":"application/yaml","size":149},{"uid":"3079cd6d4edb03a0","name":"rest_response","source":"3079cd6d4edb03a0.yaml","type":"application/yaml","size":5774}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 1: Set target node state to Off","time":{"start":1689615594112,"stop":1689615594122,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"da78e809358e4ab3","name":"stage_yaml","source":"da78e809358e4ab3.yaml","type":"application/yaml","size":228},{"uid":"620190848b8f99eb","name":"rest_request","source":"620190848b8f99eb.yaml","type":"application/yaml","size":173},{"uid":"839b22b75858dcb","name":"rest_response","source":"839b22b75858dcb.yaml","type":"application/yaml","size":134}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 2: Set target node state to Ready","time":{"start":1689615594123,"stop":1689615594135,"duration":12},"status":"passed","steps":[],"attachments":[{"uid":"34d6993cc1b518ac","name":"stage_yaml","source":"34d6993cc1b518ac.yaml","type":"application/yaml","size":231},{"uid":"6d019a62b18041be","name":"rest_request","source":"6d019a62b18041be.yaml","type":"application/yaml","size":173},{"uid":"ac8150ddf0c03b91","name":"rest_response","source":"ac8150ddf0c03b91.yaml","type":"application/yaml","size":134}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 3: Create a power-cap snapshot for the target node","time":{"start":1689615594136,"stop":1689615594149,"duration":13},"status":"passed","steps":[],"attachments":[{"uid":"aa8a244a02506a09","name":"stage_yaml","source":"aa8a244a02506a09.yaml","type":"application/yaml","size":543},{"uid":"92a21ffb254e9458","name":"rest_request","source":"92a21ffb254e9458.yaml","type":"application/yaml","size":166},{"uid":"5c1fd06fc1f824ad","name":"rest_response","source":"5c1fd06fc1f824ad.yaml","type":"application/yaml","size":261}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 4: Retrieve the power-cap snapshot for the target node","time":{"start":1689615594151,"stop":1689615596197,"duration":2046},"status":"passed","steps":[],"attachments":[{"uid":"659c58899b9269d8","name":"stage_yaml","source":"659c58899b9269d8.yaml","type":"application/yaml","size":661},{"uid":"7aa1bcfef7b8dfaa","name":"rest_request","source":"7aa1bcfef7b8dfaa.yaml","type":"application/yaml","size":159},{"uid":"3fc8a2541c779d46","name":"rest_response","source":"3fc8a2541c779d46.yaml","type":"application/yaml","size":501},{"uid":"61df563fd320501f","name":"stage_yaml","source":"61df563fd320501f.yaml","type":"application/yaml","size":661},{"uid":"92fd749279079fcf","name":"rest_request","source":"92fd749279079fcf.yaml","type":"application/yaml","size":159},{"uid":"a15b77dc2b1baa26","name":"rest_response","source":"a15b77dc2b1baa26.yaml","type":"application/yaml","size":688}],"parameters":[],"stepsCount":0,"attachmentsCount":6,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 5: Retrieve the completed power-cap snapshot for the target node","time":{"start":1689615596199,"stop":1689615596219,"duration":20},"status":"passed","steps":[],"attachments":[{"uid":"b83aa889f0b2ada5","name":"stage_yaml","source":"b83aa889f0b2ada5.yaml","type":"application/yaml","size":3543},{"uid":"3f0e6e1fbee1fa74","name":"rest_request","source":"3f0e6e1fbee1fa74.yaml","type":"application/yaml","size":159},{"uid":"54f6259e166b3412","name":"rest_response","source":"54f6259e166b3412.yaml","type":"application/yaml","size":688}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 6: Set a power-cap of the minimum value on the target node","time":{"start":1689615596221,"stop":1689615596235,"duration":14},"status":"passed","steps":[],"attachments":[{"uid":"c0c7e633c4d7238f","name":"stage_yaml","source":"c0c7e633c4d7238f.yaml","type":"application/yaml","size":639},{"uid":"e0308249705198ad","name":"rest_request","source":"e0308249705198ad.yaml","type":"application/yaml","size":230},{"uid":"e5eebcea92b806cf","name":"rest_response","source":"e5eebcea92b806cf.yaml","type":"application/yaml","size":261}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 7: Retrieve the power-cap patch for the target node and minimum power cap value","time":{"start":1689615596238,"stop":1689615597253,"duration":1015},"status":"passed","steps":[],"attachments":[{"uid":"9b95526ae60c04a1","name":"stage_yaml","source":"9b95526ae60c04a1.yaml","type":"application/yaml","size":679},{"uid":"375ef7179fe306df","name":"rest_request","source":"375ef7179fe306df.yaml","type":"application/yaml","size":159},{"uid":"aebd4af813226115","name":"rest_response","source":"aebd4af813226115.yaml","type":"application/yaml","size":553}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"Stage 8: Retrieve the completed power-cap patch for the target node and minimum power cap value","time":{"start":1689615597254,"stop":1689615597277,"duration":23},"status":"failed","statusMessage":"tavern.util.exceptions.TestFailError: Test 'Retrieve the completed power-cap patch for the target node and minimum power cap value' failed:\n- Error calling validate function '<function validate_pykwalify at 0x7f1345f2c430>':\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 106, in verify_generic\n        verifier.validate()\n      File \"/usr/lib/python3.9/site-packages/pykwalify/core.py\", line 194, in validate\n        raise SchemaError(u\"Schema validation failed:\\n - {error_msg}.\".format(\n    pykwalify.errors.SchemaError: <SchemaError: error code 2: Schema validation failed:\n     - Cannot find required key 'powerCapLimits'. Path: '/components/0'.\n     - Key 'error' was not defined. Path: '/components/0'.: Path: '/'>\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n      File \"/usr/lib/python3.9/site-packages/tavern/response/base.py\", line 152, in _maybe_run_validate_functions\n        vf(response)\n      File \"/usr/lib/python3.9/site-packages/tavern/util/extfunctions.py\", line 98, in inner\n        result = func(response, *args, **kwargs)\n      File \"/usr/lib/python3.9/site-packages/tavern/testutils/helpers.py\", line 103, in validate_pykwalify\n        verify_generic(to_verify, schema)\n      File \"/usr/lib/python3.9/site-packages/tavern/schemas/files.py\", line 109, in verify_generic\n        raise BadSchemaError() from e\n    tavern.util.exceptions.BadSchemaError\n\n","statusTrace":"  File \"/usr/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/lib/python3.9/site-packages/tavern/util/retry.py\", line 31, in wrapped\n    res = fn(*args, **kwargs)\n  File \"/usr/lib/python3.9/site-packages/tavern/core.py\", line 270, in run_stage\n    saved = v.verify(response)\n  File \"/usr/lib/python3.9/site-packages/tavern/_plugins/rest/response.py\", line 201, in verify\n    raise exceptions.TestFailError(\n","steps":[],"attachments":[{"uid":"82b23a22025deac8","name":"stage_yaml","source":"82b23a22025deac8.yaml","type":"application/yaml","size":3157},{"uid":"a45235481fd94051","name":"rest_request","source":"a45235481fd94051.yaml","type":"application/yaml","size":159},{"uid":"92c1023ea9d57677","name":"rest_response","source":"92c1023ea9d57677.yaml","type":"application/yaml","size":553}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"c952c80415049a70","name":"error_output","source":"c952c80415049a70.attach","type":"text/plain","size":8407},{"uid":"563718aa0373710b","name":"log","source":"563718aa0373710b.txt","type":"text/plain","size":7691}],"parameters":[],"stepsCount":9,"attachmentsCount":32,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"cray-power-control-hmth-test"},{"name":"suite","value":"build-pipeline-only"},{"name":"host","value":"a341998d8f7b"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"api.4-build-pipeline-only.test_power-cap.tavern"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"383a4ff72731a23a.json","parameterValues":[]}