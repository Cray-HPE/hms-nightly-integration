name: Nightly Integration
on:
  workflow_dispatch:
  pull_request:
  schedule:
  - cron: '0 8 * * *' # 8am every day UTC. 3 AM Central. This will trigger the action to run after the hms-build-workflow-dispatcher has rebuilt HMS images

permissions: read-all

jobs:
  determine-service-versions:
    name: Determine service versions
    runs-on: ubuntu-latest
    outputs:
      csm-releases: ${{ steps.extract-container-images.outputs.csm-releases }}
      images-by-csm-release: ${{ steps.extract-container-images.outputs.images-by-csm-release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install python dependencies
      shell: bash
      run: pip3 install -r requirements.txt

    - name: Extract container images from CSM manifests
      shell: bash
      id: extract-container-images
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ARTIFACTORY_ALGOL60_READONLY_USERNAME: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_USERNAME }}
        ARTIFACTORY_ALGOL60_READONLY_TOKEN: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_TOKEN }}
      run: |
        set -eux
        ./csm_manifest_extractor.py
        echo "images-by-csm-release=$(cat extractor-output-images_by_csm_release.json | jq -c)" >> $GITHUB_OUTPUT
        echo "csm-releases=$(cat extractor-output-images_by_csm_release.json | jq '. | keys' -c)" >> $GITHUB_OUTPUT
  

  integration-test:
    name: Integration test
    needs: determine-service-versions
    strategy:
      matrix:
        csm-release: ${{ fromJSON(needs.determine-service-versions.outputs.csm-releases) }}
      fail-fast: false
    runs-on: ubuntu-latest
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Checkout hms-simulation-environment
      uses: actions/checkout@v2
      with:
        path: hms-simulation-environment
        repository: Cray-HPE/hms-simulation-environment
        ref: v1
        fetch-depth: 0

    - name: Get Allure history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages
        
    - name: Store test data
      shell: bash
      env:
        IMAGES_BY_CSM_RELEASE: ${{ needs.determine-service-versions.outputs.images-by-csm-release }}
      run: |
        echo "CSM Branch: ${{ matrix.csm-release }}"
        echo "Images by csm release:"
        printenv IMAGES_BY_CSM_RELEASE > images-by-csm-release.json
        jq . images-by-csm-release.json

    # Update container images in docker-compose.yaml
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install python dependencies
      shell: bash
      run: pip3 install -r requirements.txt

    - name: Update container images in docker-compose.yaml
      shell: bash
      env:
        CSM_RELEASE: "${{ matrix.csm-release }}"
      run: ./update_docker_compose.py images-by-csm-release.json "${CSM_RELEASE}" ./hms-simulation-environment/docker-compose.yaml

    # Stand up hms-simulation environment
    - name: Standup simulation environment
      shell: bash
      run: |
        set -ex
        cd hms-simulation-environment
        # For debugging output the modified docker-compose compose file
        echo "Updated docker-compose.yaml"
        cat docker-compose.yaml
        # Setup python virtual environment
        ./setup_venv.sh
        . ./venv/bin/activate
        ./run.py configs/sls/small_mountain.json

    # Run tests
    - name: Run tests
      shell: bash
      env:
        CSM_RELEASE: "${{ matrix.csm-release }}"
      run: |
        ./run_tests.py images-by-csm-release.json "${CSM_RELEASE}"

    - name: Collapse test results
      shell: bash
      run: |
        mkdir -p allure-agg
        for file in $(find . -type f); do
          mv -v "$file" ./allure-agg
        done

    - name: Allure Report action from marketplace
      uses: simple-elf/allure-report-action@master
      if: always()
      id: allure-report
      with:
        # TODO does this encode branch info?
        allure_results: ./allure-agg
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history

    # Deploy into separate directories with timestamp/branch
    # Prune old directories
    # Perhaps collect results from the matrix-jobs and then update github pages at the same time
    # Also do an amend commit to keep the repo small. 